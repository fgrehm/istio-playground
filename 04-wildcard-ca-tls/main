#!/usr/bin/env bash

set -eu -o pipefail

dccr='docker compose -f docker-compose-clis.yml run --rm'
alias istioctl='dccr --istioctl'
alias openssl='dccr openssl'
alias stepcli='dccr ca-cli'
alias helm='dccr helm'
alias kubectl='dccr kubectl'

INGRESS_HOST="0.0.0.0.nip.io"

https://artifacthub.io/packages/helm/smallstep/step-certificates

helm install step-certificates
echo "NEED MORE FLAGS, REMOVE FROM COMPOSE AND RUN WITH kubectl run -ti --rm ...!"
exit 1
${STEPCA} step ca init --name Dev \
                       --dns "ca.${INGRESS_HOST}" \
                       --address :9000


# DNS.1 = ${INGRESS_HOST}
# DNS.2 = *.${INGRESS_HOST}

# START_TIME=`date "+%s"`

# echo '### Setup k3s'
# docker-compose up -d server agent
# sleep 5
# until kubectl wait --for=condition=ready node --all; do sleep 1; done 2>/dev/null
# until kubectl wait --for=condition=available deployment/coredns -n kube-system; do sleep 1; done 2>/dev/null
# until kubectl wait --for=condition=available deployment/metrics-server -n kube-system; do sleep 1; done 2>/dev/null
# until kubectl wait --for=condition=available deployment/traefik -n kube-system; do sleep 1; done 2>/dev/null
# echo

# echo '### Setup cert-manager'
# kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.7.1/cert-manager.yaml
# until kubectl wait --for=condition=available deployment/cert-manager -n cert-manager; do sleep 1; done 2>/dev/null
# echo

# echo "### Setup Istio operator"
# ${ISTIOCTL} install --set profile=demo -y
# kubectl label namespace default istio-injection=enabled --overwrite
# export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
# export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')
# export INGRESS_HOST="$(kubectl get po -l istio=ingressgateway -n istio-system -o jsonpath='{.items[0].status.hostIP}').nip.io"
# export GATEWAY_URL="${INGRESS_HOST}:${INGRESS_PORT}"
# export SECURE_GATEWAY_URL="${INGRESS_HOST}:${SECURE_INGRESS_PORT}"
# echo

# echo "### Deploy httpbin"
# kubectl apply -n default -f https://raw.githubusercontent.com/istio/istio/release-1.13/samples/httpbin/httpbin.yaml
# until kubectl wait --for=condition=available deployment/httpbin -n default; do sleep 1; done 2>/dev/null

# echo "### Generate certs for ${INGRESS_HOST}"
# ${OPENSSL} req -x509 \
#                -sha256 \
#                -nodes \
#                -days 365 \
#                -newkey rsa:2048 \
#                -subj "/CN=${INGRESS_HOST}" \
#                -keyout "/host/${INGRESS_HOST}.key" \
#                -out "/host/${INGRESS_HOST}.crt"

# ${OPENSSL} req -out "/host/wildcard.${INGRESS_HOST}.csr" \
#                -newkey rsa:2048 \
#                -nodes \
#                -keyout "/host/wildcard.${INGRESS_HOST}.key" \
#                -subj "/CN=${INGRESS_HOST}"

# # Create a config file for the extensions
# >"wildcard.${INGRESS_HOST}.ext" cat <<-EOF
# authorityKeyIdentifier=keyid,issuer
# basicConstraints=CA:FALSE
# keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
# extendedKeyUsage = serverAuth, clientAuth
# subjectAltName = @alt_names
# [alt_names]
# DNS.1 = ${INGRESS_HOST}
# DNS.2 = *.${INGRESS_HOST}
# EOF

# ${OPENSSL} x509 -req \
#                 -sha256 \
#                 -days 365 \
#                 -CA "/host/${INGRESS_HOST}.crt" \
#                 -CAkey "/host/${INGRESS_HOST}.key" \
#                 -set_serial 0 \
#                 -in "/host/wildcard.${INGRESS_HOST}.csr" \
#                 -extfile "wildcard.${INGRESS_HOST}.ext" \
#                 -out "/host/wildcard.${INGRESS_HOST}.crt"
# set -x
# sudo chown "${USER}:" *.nip.io.*
# set +x

# echo "### Configuring gateway"
# kubectl -n istio-system create secret tls wildcard-credential "--key=wildcard.${INGRESS_HOST}.key" "--cert=wildcard.${INGRESS_HOST}.crt"

# kubectl apply -f - <<EOF
# apiVersion: networking.istio.io/v1alpha3
# kind: Gateway
# metadata:
#   name: httpbin-gateway
# spec:
#   selector:
#     istio: ingressgateway # use Istio default gateway implementation
#   servers:
#   - port:
#       number: 443
#       name: https
#       protocol: HTTPS
#     tls:
#       mode: SIMPLE
#       credentialName: wildcard-credential # must be the same as secret
#     hosts:
#     - "httpbin.${INGRESS_HOST}"
# EOF

# kubectl apply -f - <<EOF
# apiVersion: networking.istio.io/v1alpha3
# kind: VirtualService
# metadata:
#   name: httpbin
# spec:
#   hosts:
#   - "httpbin.${INGRESS_HOST}"
#   gateways:
#   - httpbin-gateway
#   http:
#   - match:
#     - uri:
#         prefix: /status
#     - uri:
#         prefix: /delay
#     - uri:
#         prefix: /headers
#     route:
#     - destination:
#         port:
#           number: 8000
#         host: httpbin
# EOF

# echo "### Testing httpbin (https://${SECURE_GATEWAY_URL})"
# set -x
# curl -v --resolve "httpbin.${INGRESS_HOST}:${SECURE_INGRESS_PORT}:${INGRESS_HOST}" \
#         --cacert "${INGRESS_HOST}.crt" \
#         "https://httpbin.${INGRESS_HOST}:${SECURE_INGRESS_PORT}/headers"
# set +x

# END_TIME=`date "+%s"`

# echo "### Setup time: $((${END_TIME} - ${START_TIME}))s"
