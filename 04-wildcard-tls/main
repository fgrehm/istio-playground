#!/usr/bin/env bash

set -eu -o pipefail

source 00-common/shared.sh

START_TIME=`date "+%s"`

configure-cluster

echo "### Deploy httpbin"
kubectl create ns wildcard-tls 2>/dev/null || echo "wildcard-tls namespace already exists"
kubectl label namespace wildcard-tls istio-injection=enabled --overwrite
kubectl apply -n wildcard-tls -f 00-common/httpbin.yaml
until kubectl wait --for=condition=available deployment/httpbin -n wildcard-tls; do sleep 1; done 2>/dev/null
istioctl analyze -n wildcard-tls
echo

ingress_host="$(fetch-ingress-host)"
ingress_port="$(fetch-ingress-port)"
secure_ingress_port="$(fetch-secure-ingress-port)"
wildcard_cert_name="wildcard.httpbin.${ingress_host}"

echo "### Generate CA root certs for ${ingress_host}"
mkdir -p certs/
openssl req -x509 \
            -sha256 \
            -nodes \
            -days 365 \
            -newkey rsa:2048 \
            -subj "/CN=${ingress_host}" \
            -keyout "/host/certs/${ingress_host}.key" \
            -out "/host/certs/${ingress_host}.crt"

openssl req -out "/host/certs/${wildcard_cert_name}.csr" \
            -newkey rsa:2048 \
            -nodes \
            -keyout "/host/certs/${wildcard_cert_name}.key" \
            -subj "/CN=*.httpbin.${ingress_host}"

openssl x509 -req \
             -sha256 \
             -days 365 \
             -CA "/host/certs/${ingress_host}.crt" \
             -CAkey "/host/certs/${ingress_host}.key" \
             -set_serial 0 \
             -in "/host/certs/${wildcard_cert_name}.csr" \
             -out "/host/certs/${wildcard_cert_name}.crt"

set -x
sudo chown "${USER}:" certs/
set +x

echo "### Configuring gateway"
# NOTE: The TLS secret needs to be created in istio-system
kubectl -n istio-system create secret tls wildcard-tls \
                                          "--key=/host/certs/${wildcard_cert_name}.key" \
                                          "--cert=/host/certs/${wildcard_cert_name}.crt"

kubectl apply -n wildcard-tls -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: httpbin
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: wildcard-tls # must be the same as secret
    hosts:
    - "*.httpbin.${ingress_host}"
EOF

kubectl apply -n wildcard-tls -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: headers
spec:
  hosts:
  - "headers.httpbin.${ingress_host}"
  gateways:
  - httpbin
  http:
  - match:
    - uri:
        prefix: /
    rewrite:
      uri: "/headers"
    route:
    - destination:
        port:
          number: 8000
        host: httpbin
EOF

kubectl apply -n wildcard-tls -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: status
spec:
  hosts:
  - "status.httpbin.${ingress_host}"
  gateways:
  - httpbin
  http:
  - match:
    - uri:
        prefix: ""
    rewrite:
      uri: "/status"
    route:
    - destination:
        port:
          number: 8000
        host: httpbin
EOF
istioctl analyze -n wildcard-tls

secure_url="https://headers.httpbin.${ingress_host}:${secure_ingress_port}"
echo "### Testing TLS to ${secure_url}"
curl -sSfL --cacert "certs/${ingress_host}.crt" "${secure_url}"

secure_url="https://status.httpbin.${ingress_host}:${secure_ingress_port}"
echo "### Testing TLS to ${secure_url}"
curl -sSfLI --cacert "certs/${ingress_host}.crt" "${secure_url}/201"

END_TIME=`date "+%s"`

echo "### Setup time: $((${END_TIME} - ${START_TIME}))s"
