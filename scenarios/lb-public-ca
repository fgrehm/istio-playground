#!/usr/bin/env bash

set -eu -o pipefail

source lib/all.sh

START_TIME=`date "+%s"`

bootstrap::public-ca
bootstrap::public-lb
bootstrap::cluster

namespace="lb-public-ca"
apps::deploy-httpbin "${namespace}"

lb_ip=$(docker inspect $(docker-compose ps | grep 'public-lb' | awk '{print $1}') \
                       --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}')

ns_tld="${namespace}.${lb_ip}.nip.io"
wildcard_cert_name="wildcard.${ns_tld}"

mkdir -p tmp/certs
if ! [[ -f "tmp/certs/${wildcard_cert_name}.key" ]]; then
  echo_title "Generating certs for *.${ns_tld}"
  exec::public-ca step ca certificate "*.${ns_tld}" "tmp/certs/${wildcard_cert_name}.crt" "tmp/certs/${wildcard_cert_name}.key" \
                                 --provisioner-password-file=/host/tmp/public-ca/secrets/password \
                                 --not-after "24h"

  # NOTE: The TLS secret needs to be created in istio-system
  tools::kubectl -n istio-system create secret tls "${namespace}-wildcard-tls" \
                                                   "--key=/host/tmp/certs/${wildcard_cert_name}.key" \
                                                   "--cert=/host/tmp/certs/${wildcard_cert_name}.crt"
fi

echo_title "Configuring LB for *.${ns_tld} hosts"

ig_ips=$(tools::kubectl -n istio-system \
                         -o jsonpath='{.status.loadBalancer.ingress}' \
                         get svc/istio-ingressgateway \
          | tools::jq -cr '.[].ip')

echo_normal "Ingress Gateway IPs:"
lb_upstream=""
secure_lb_upstream=""
for ip in ${ig_ips[@]}; do
  echo_normal "  * ${ip}"
  lb_upstream+="\n  server ${ip};"
  secure_lb_upstream+="\n  server ${ip}:443;"
done

cat <<-STR > "tmp/public-lb/nginx-conf.d/${ns_tld}.conf"
upstream k3s {$(echo -e "${lb_upstream}")
}

upstream k3s-secure {$(echo -e "${secure_lb_upstream}")
}

server {
  listen 80;
  server_name *.${ns_tld};
  location / {
    proxy_set_header Host \$host;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header X-Playground-Public-LB "1";
    # proxy_set_header X-Real-IP \$remote_addr;
    # proxy_set_header X-Forwarded-Proto \$scheme;
    # proxy_set_header X-Forwarded-Port 80;
    # proxy_set_header Upgrade \$http_upgrade;
    # proxy_set_header Connection "upgrade";

    proxy_http_version 1.1;
    proxy_pass http://k3s;
    # proxy_pass_request_headers on;
  }
}

server {
  listen 443 ssl;
  server_name *.${ns_tld};
  ssl_certificate /host/tmp/certs/${wildcard_cert_name}.crt;
  ssl_certificate_key /host/tmp/certs/${wildcard_cert_name}.key;
  location / {
    proxy_set_header Host \$host;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header X-Playground-Public-LB-SSL "1";
    proxy_ssl_name \$host;
    proxy_ssl_server_name on;

    proxy_http_version 1.1;
    proxy_pass https://k3s-secure;
  }
}
STR

echo_title "Configuring Gateway and services"
tools::kubectl apply -n "${namespace}" -f - <<EOF | ensure_indent
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: ns-gateway
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*.${ns_tld}"
    # tls:
    #   httpsRedirect: true
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: ${namespace}-wildcard-tls # must be the same as secret
    hosts:
    - "*.${ns_tld}"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: headers
spec:
  hosts:
  - "headers.${ns_tld}"
  gateways:
  - mesh
  - ns-gateway
  http:
  - match:
    - uri:
        prefix: "/"
    rewrite:
      uri: "/headers"
    route:
    - destination:
        port:
          number: 8000
        host: httpbin.${namespace}.svc.cluster.local
  # - match:
  #   - uri:
  #       prefix: "/"
  #   - port: 443
  #   rewrite:
  #     uri: "/headers"
  #   route:
  #   - destination:
  #       host: istio-ingressgateway.istio-system.svc.cluster.local
  #       port:
  #         number: 443
  # tls:
  # - match:
  #   - port: 443
  #     sniHosts:
  #     - "headers.${ns_tld}"
  #   route:
  #   - destination:
  #       port:
  #         number: 443
  #       host: istio-ingressgateway.istio-system.svc.cluster.local
# ---
# apiVersion: networking.istio.io/v1beta1
# kind: DestinationRule
# metadata:
#   name: headers-tls
#   namespace: lb-public-ca
# spec:
#   host: headers.lb-public-ca.192.168.128.3.nip.io
#   trafficPolicy:
#     tls:
#       mode: ISTIO_MUTUAL
#       sni: headers.lb-public-ca.192.168.128.3.nip.io
EOF
tools::istioctl analyze -n "${namespace}" 2>&1 | ensure_indent

url="https://headers.${ns_tld}:$(ingress::fetch-secure-port)"
echo_title "Testing HTTPS ingress to ${url}"
curl -isSfL --cacert "tmp/public-ca/certs/root_ca.crt" "${url}"

url="http://headers.${ns_tld}"
echo_title "Testing HTTP -> HTTPS redirects from ${url}"
curl -isSf --cacert "tmp/public-ca/certs/root_ca.crt" "${url}" 2>&1 \
  | tee /tmp/istio-playground-tls-http-redirect
if ! grep -q '301 Moved' /tmp/istio-playground-tls-http-redirect; then
  fail "NO REDIRECT"
fi
if ! grep -q "location: https://headers.${ns_tld}" /tmp/istio-playground-tls-http-redirect; then
  fail "WRONG REDIRECT"
fi

END_TIME=`date "+%s"`

echo_title "Total time: $((${END_TIME} - ${START_TIME}))s"
