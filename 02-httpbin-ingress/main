#!/usr/bin/env bash

set -eu -o pipefail

dccr() { docker-compose -f docker-compose.yml -f docker-compose-clis.yml run --rm "${@}"; }
kubectl() { dccr "kubectl" "${@}"; }
istioctl() { dccr "istioctl" "${@}"; }

START_TIME=`date "+%s"`

echo '### Setup k3s'
docker-compose up -d server agent
sleep 5
until kubectl wait --for=condition=ready node --all; do sleep 1; done 2>/dev/null
until kubectl wait --for=condition=available deployment/coredns -n kube-system; do sleep 1; done 2>/dev/null
until kubectl wait --for=condition=available deployment/metrics-server -n kube-system; do sleep 1; done 2>/dev/null
until kubectl wait --for=condition=available deployment/traefik -n kube-system; do sleep 1; done 2>/dev/null
echo

echo "### Setup Istio operator"
istioctl install --set profile=demo -y
kubectl label namespace default istio-injection=enabled --overwrite
export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')
export INGRESS_HOST="$(kubectl get po -l istio=ingressgateway -n istio-system -o jsonpath='{.items[0].status.hostIP}').nip.io"
export GATEWAY_URL="${INGRESS_HOST}:${INGRESS_PORT}"
echo "${GATEWAY_URL}"
echo

echo "### Setup httpbin"
kubectl apply -n default -f https://raw.githubusercontent.com/istio/istio/release-1.13/samples/httpbin/httpbin.yaml
until kubectl wait --for=condition=available deployment/httpbin -n default; do sleep 1; done 2>/dev/null
kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: httpbin-gateway
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "httpbin.${INGRESS_HOST}"
EOF

kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: httpbin
spec:
  hosts:
  - "httpbin.${INGRESS_HOST}"
  gateways:
  - httpbin-gateway
  http:
  - match:
    - uri:
        prefix: /status
    - uri:
        prefix: /delay
    - uri:
        prefix: /headers
    route:
    - destination:
        port:
          number: 8000
        host: httpbin
EOF

echo "### Testing httpbin"
curl -L "http://httpbin.${GATEWAY_URL}/headers"

END_TIME=`date "+%s"`

echo "### Setup time: $((${END_TIME} - ${START_TIME}))s"
