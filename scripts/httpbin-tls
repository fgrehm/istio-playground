#!/usr/bin/env bash

# Based on https://github.com/mrchrd/k3s-quickstart/blob/e664684a6857764138a245c55b17eb6b582b9929/run.sh

set -eu -o pipefail

export KUBECONFIG=`pwd`/kubeconfig.yaml
ISTIOCTL='docker-compose run --rm istioctl'
OPENSSL='docker-compose run --rm openssl'

START_TIME=`date "+%s"`

echo '### Setup k3s'
docker-compose up -d server agent
sleep 5
until kubectl wait --for=condition=ready node --all; do sleep 1; done 2>/dev/null
until kubectl wait --for=condition=available deployment/coredns -n kube-system; do sleep 1; done 2>/dev/null
until kubectl wait --for=condition=available deployment/metrics-server -n kube-system; do sleep 1; done 2>/dev/null
until kubectl wait --for=condition=available deployment/traefik -n kube-system; do sleep 1; done 2>/dev/null
echo

echo '### Setup cert-manager'
kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.7.1/cert-manager.yaml
until kubectl wait --for=condition=available deployment/cert-manager -n cert-manager; do sleep 1; done 2>/dev/null
echo

echo "### Setup Istio operator"
${ISTIOCTL} install --set profile=demo -y
kubectl label namespace default istio-injection=enabled --overwrite
export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')
export INGRESS_HOST="$(kubectl get po -l istio=ingressgateway -n istio-system -o jsonpath='{.items[0].status.hostIP}').nip.io"
export GATEWAY_URL="${INGRESS_HOST}:${INGRESS_PORT}"
export SECURE_GATEWAY_URL="${INGRESS_HOST}:${SECURE_INGRESS_PORT}"
echo

echo "### Deploy httpbin"
kubectl apply -n default -f https://raw.githubusercontent.com/istio/istio/release-1.13/samples/httpbin/httpbin.yaml
until kubectl wait --for=condition=available deployment/httpbin -n default; do sleep 1; done 2>/dev/null

echo "### Generate CA root certs for ${INGRESS_HOST}"
${OPENSSL} req -x509 \
               -sha256 \
               -nodes \
               -days 365 \
               -newkey rsa:2048 \
               -subj "/CN=${INGRESS_HOST}" \
               -keyout "/host/${INGRESS_HOST}.key" \
               -out "/host/${INGRESS_HOST}.crt"

${OPENSSL} req -out "/host/httpbin.${INGRESS_HOST}.csr" \
               -newkey rsa:2048 \
               -nodes \
               -keyout "/host/httpbin.${INGRESS_HOST}.key" \
               -subj "/CN=httpbin.${INGRESS_HOST}"

${OPENSSL} x509 -req \
                -sha256 \
                -days 365 \
                -CA "/host/${INGRESS_HOST}.crt" \
                -CAkey "/host/${INGRESS_HOST}.key" \
                -set_serial 0 \
                -in "/host/httpbin.${INGRESS_HOST}.csr" \
                -out "/host/httpbin.${INGRESS_HOST}.crt"
set -x
sudo chown "${USER}:" *.nip.io.*
set +x

echo "### Configuring gateway"
kubectl -n istio-system create secret tls httpbin-credential "--key=httpbin.${INGRESS_HOST}.key" "--cert=httpbin.${INGRESS_HOST}.crt"

kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: httpbin-gateway
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: httpbin-credential # must be the same as secret
    hosts:
    - "httpbin.${INGRESS_HOST}"
EOF

kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: httpbin
spec:
  hosts:
  - "httpbin.${INGRESS_HOST}"
  gateways:
  - httpbin-gateway
  http:
  - match:
    - uri:
        prefix: /status
    - uri:
        prefix: /delay
    - uri:
        prefix: /headers
    route:
    - destination:
        port:
          number: 8000
        host: httpbin
EOF

echo "### Testing httpbin (https://${SECURE_GATEWAY_URL})"
set -x
curl -v --resolve "httpbin.${INGRESS_HOST}:${SECURE_INGRESS_PORT}:${INGRESS_HOST}" \
        --cacert "${INGRESS_HOST}.crt" \
        "https://httpbin.${INGRESS_HOST}:${SECURE_INGRESS_PORT}/headers"

END_TIME=`date "+%s"`

echo "### Setup time: $((${END_TIME} - ${START_TIME}))s"
